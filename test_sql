-- =============================================================================
CREATE SCHEMA `go_db1`;

-- =============================================================================
CREATE TABLE customer (

id serial primary key,
first_name varchar(255),
last_name varchar(255),
credit_score int,
salary float,
downpayment float

);

-- =============================================================================
INSERT INTO `go_db1` . `customer` ( `id`, `first_name`, `last_name`, `credit_score`, `salary`, `downpayment` )
VALUES ( '1', 'Nick', 'Jonas', '670', '10000', '500' );

-- =============================================================================
SELECT * FROM go_db1.customer;

-- =============================================================================
UPDATE `go_db1` . `customer` SET `last_name`='Shinoda' WHERE `id`='3';

-- =============================================================================
DELETE FROM `go_db1` . `customer` WHERE `id`='3';

















-- =============================================================================
CREATE TABLE employee (
    customer_id serial primary key,
    first_name varchar(50),
    last_name varchar(50),
    email varchar(50),
    gender varchar(1),
    employer_id int
    );

-- =============================================================================
INSERT INTO employee VALUES (1, 'Jessica', 'Young', 'j@young.com', 'F', 3);
INSERT INTO employee VALUES (2, 'John', 'Jones', 'j@jones.com', 'M', 2);
INSERT INTO employee VALUES (3, 'Ray', 'Davis', 'r@davis.com', 'M', 1);
INSERT INTO employee VALUES (4, 'Sandra', 'Walker', 's@walker.com', 'F', 2);
INSERT INTO employee VALUES (5, 'Tina', 'Simmons', 't@simmons.com', 'F', 3);
INSERT INTO employee VALUES (6, 'Don', 'Jackson', 'd@jackson.com', 'M', 1);

-- =============================================================================
SELECT * FROM employee

-- =============================================================================
CREATE TABLE employer (
    employer_id serial primary key,
    company_name varchar(50)
);

-- =============================================================================
INSERT INTO employer VALUES (1, 'Amazon');
INSERT INTO employer VALUES (2, 'Google');
INSERT INTO employer VALUES (3, 'Microsoft');

-- =============================================================================
SELECT * FROM employer;

-- =============================================================================
SELECT first_name, gender FROM employee;

-- =============================================================================
SELECT * FROM employee WHERE gender = 'F';
SELECT * FROM employee WHERE gender != 'F';

-- =============================================================================
SELECT * FROM employee WHERE first_name = 'John' OR last_name = 'Jackson';

-- =============================================================================
SELECT * FROM employee WHERE employer_id <= 2;

-- =============================================================================
SELECT * FROM employee WHERE customer_id NOT BETWEEN 2 AND 4;

-- =============================================================================
SELECT * FROM employee WHERE first_name LIKE 'J%';

-- =============================================================================
SELECT * FROM employee WHERE last_name LIKE '%n%';

-- =============================================================================
SELECT * FROM employee WHERE email LIKE '_@j%';

-- =============================================================================
SELECT employer_id FROM employee;
SELECT DISTINCT employer_id FROM employee;

-- =============================================================================
SELECT COUNT(*) FROM employee;
SELECT COUNT(employer_id) FROM employee;
SELECT COUNT(DISTINCT employer_id) FROM employee;

-- =============================================================================
SELECT * FROM employee ORDER BY gender DESC, employer_id ASC;

-- =============================================================================
SELECT * FROM employee ORDER BY gender DESC, employer_id ASC LIMIT 4;

















-- =============================================================================
SELECT * FROM employee e, employer r;

-- =============================================================================
SELECT COUNT(*) FROM employee e, employer r;

-- =============================================================================
SELECT * FROM employee e, employer r WHERE e.employer_id = r.employer_id;

-- =============================================================================
SELECT e.first_name, e.employer_id, r.company_name FROM employee e, employer r WHERE e.employer_id = r.employer_id;















-- =============================================================================
CREATE TABLE t1 (
    id SERIAL PRIMARY KEY,
    animal VARCHAR(20)
);

-- =============================================================================
INSERT INTO t1 VALUES (1, 'Lion'); 
INSERT INTO t1 VALUES (2, 'Bear');
INSERT INTO t1 VALUES (3, 'Tiger');
INSERT INTO t1 VALUES (4, 'Elephant');

-- =============================================================================
CREATE TABLE t2 (
    id SERIAL PRIMARY KEY,
    animal VARCHAR(20)
);

-- =============================================================================
INSERT INTO t2 VALUES (1, 'Lion'); 
INSERT INTO t2 VALUES (2, 'Giraffe');
INSERT INTO t2 VALUES (3, 'Panda');
INSERT INTO t2 VALUES (4, 'Tiger');



-- =============================================================================
* INNER JOIN (2)
SELECT * FROM t1 INNER JOIN t2 ON t1.animal = t2.animal;

-- =============================================================================
* FULL OUTER JOIN (1+2+3)
SELECT * FROM t1 LEFT JOIN t2 ON t1.animal = t2.animal UNION ALL 
SELECT * FROM t1 RIGHT JOIN t2 ON t1.animal = t2.animal WHERE t1.id IS NULL;

-- =============================================================================
* LEFT OUTER JOIN (1+2)
SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.animal = t2.animal;

-- =============================================================================
* LEFT OUTER JOIN with WHERE CLAUSE (1)
SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.animal = t2.animal WHERE t2.id IS NULL;

-- =============================================================================
* FULL OUTER JOIN with WHERE CALUSE (1+3)
SELECT * FROM t1 LEFT OUTER JOIN t2 ON t1.animal = t2.animal WHERE t2.id IS NULL or t1.id IS NULL UNION 
SELECT * FROM t1 RIGHT OUTER JOIN t2 ON t1.animal = t2.animal WHERE t2.id IS NULL or t1.id IS NULL;